# AUTOGENERATED! DO NOT EDIT! File to edit: 08_batch_mode.ipynb (unless otherwise specified).

__all__ = ['batch_results', 'plot_batch', 'plot_avg_and_dots', 'plot_avg_and_errorbars', 'plot_area', 'plot_boxplot']

# Internal Cell
import pydicom
import matplotlib.pyplot as plt
import os
import sys
import numpy as np
import pandas as pd
import napari
import gif
from fastai.vision import *
import tensorflow.compat.v1 as tf
from .core import *
from torchio.transforms import Spike
from .mri import *
import altair as alt
import altair_viewer

# Internal Cell
def prepareImage(file):
    ds = pydicom.dcmread(file)
    img = Tensor(ds.pixel_array.astype(np.int16))
    img = img/img.max()
    img = Image(torch.stack([img, img, img]))    # statt: img = Image(img.unsqueeze(0))
    img = img.flip_lr()
    img= img.rotate(90)
    return img

# Cell
def batch_results(images, model, transformation_functions, true_masks=None):
    results = []
    for x in transformation_functions:
        trfm_result = []
        for index, i in enumerate(images):
            img = lambda: prepareImage(i)
            if true_masks == None:
                path = os.path.join(os.getcwd(), "predicted_truths")
                os.mkdir(path)
                truth = model.predict(img())[0]
                truth.save(os.path.join(path, "current_truth.png"))
                true_mask = lambda: open_mask(os.path.join(path, "current_truth.png"))
            elif true_masks != None:
                true_mask = lambda: open_mask(true_mask[index])
            df = x(img(), true_mask(), model, components=['bg','LV','MY', "RV"])
            df["File"] = i
            trfm_result.append(df)
            shutil.rmtree(path)
        trfm_result = pd.concat(trfm_result)
        results.append(trfm_result)
    return results

# Cell
def plot_batch(df_results, plottype="avg_errorbars"):
    plots = []
    for i in df_results:
        if plottype == "avg_errorbars":
            plot = plot_avg_and_errorbars(i)
        elif plottype == "avg_dots":
            plot = plot_avg_and_dots(i)
        elif plottype == "boxplot":
            plot = plot_boxplot(i)
        elif plottype == "area":
            plot = plot_area(i)
        else:
            raise ValueError(f'plottype must be one of "avg_errorbars", "avg_dots", "area" or "boxplot"')
        plots.append(plot)
    for p in plots:
        p.display()
    return plots

# Cell
def plot_avg_and_dots(df):
    melt_results = df.melt(id_vars=df.columns[0], value_vars=df.columns[2:5])
    avg_line_plot = alt.Chart(melt_results
                ).mark_line(
                ).encode(x=melt_results.columns[0], y="average(value)", color=alt.Color("variable")
                ).properties(width=400, height=200
                ).interactive()
    dot_plot = alt.Chart(melt_results
                ).mark_point(
                ).encode(x=melt_results.columns[0], y="value", color=alt.Color("variable")
                ).properties(width=400, height=200
                ).interactive()
    plot = alt.layer(dot_plot, avg_line_plot).facet(column="variable")
    return plot

# Cell
def plot_avg_and_errorbars(df):
    melt_results = df.melt(id_vars=df.columns[0], value_vars=df.columns[2:5])
    avg_line_plot = alt.Chart(melt_results
                ).mark_line(
                ).encode(x=melt_results.columns[0], y="average(value)", color=alt.Color("variable")
                ).properties(width=400, height=200
                ).interactive()
    error_bars = alt.Chart(melt_results
                ).mark_errorbar(extent='stdev'
                ).encode(x=melt_results.columns[0], y="value", color=alt.Color("variable"))
    plot = alt.layer(avg_line_plot, error_bars).facet(column="variable")
    return plot

# Cell
def plot_area(df):
    melt_results = df.melt(id_vars=df.columns[0], value_vars=df.columns[2:5])
    area = alt.Chart(melt_results
                    ).mark_area(opacity=0.3, color='#57A44C'
                    ).encode(x=melt_results.columns[0], y="value", color=alt.Color("variable")
                    ).properties(width=400, height=200
                    ).interactive()
    avg_line_plot = alt.Chart(melt_results
                ).mark_line(
                ).encode(x=melt_results.columns[0], y="average(value)", color=alt.Color("variable")
                ).properties(width=400, height=200
                ).interactive()
    plot = alt.layer(area, avg_line_plot).facet(column="variable")
    return plot

# Cell
def plot_boxplot(df):
    melt_results = df.melt(id_vars=df.columns[0], value_vars=df.columns[2:5])
    plot = alt.Chart(melt_results
                ).mark_boxplot(extent="min-max", size=5
                ).encode(x=alt.X(melt_results.columns[0]), y=alt.Y("value"), color=alt.Color("variable")
                ).properties(width=400, height=200
                ).facet(column="variable"
                ).interactive()
    return plot